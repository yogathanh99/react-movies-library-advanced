{"ast":null,"code":"var _jsxFileName = \"/Users/thanhvo/Self-Learning/react-movies-library/src/components/Movie/index.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { API_KEY, API_URL } from '../../config';\nimport Navigation from '../elements/Navigation';\nimport MovieInfo from '../elements/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid';\nimport Actor from '../elements/Actor';\nimport Spinner from '../elements/Spinner';\nimport './Movie.css';\n\nclass Movie extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchData = async endpoint => {\n      const movieId = this.props.match.params.movieId;\n      await axios.get(endpoint).then(res => res.data).then(data => {\n        console.log(data);\n\n        if (data.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: data\n          }, async () => {\n            let endpointData = \"\".concat(API_URL, \"movie/\").concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n            await axios.get(endpointData).then(res => res.data).then(res => {\n              console.log(res);\n              const directors = res.crew.filter(member => member.job === 'Director');\n              this.setState({\n                actors: res.cast,\n                directors,\n                loading: false\n              });\n            });\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    const movieId = this.props.match.params.movieId;\n    this.setState({\n      loading: true\n    });\n    const endpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"?api_key=\").concat(API_KEY, \"&language=en-US\");\n    this.fetchData(endpoint);\n  }\n\n  render() {\n    const movieName = this.props.location.movieName;\n    const _this$state = this.state,\n          movie = _this$state.movie,\n          directors = _this$state.directors;\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, movie ? React.createElement(React.Fragment, null, React.createElement(Navigation, {\n      movieName: movieName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: movie,\n      directors: directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: movie.runtime,\n      budget: movie.budget,\n      revenue: movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/thanhvo/Self-Learning/react-movies-library/src/components/Movie/index.js"],"names":["React","axios","API_KEY","API_URL","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","Component","state","movie","actors","directors","loading","fetchData","endpoint","movieId","props","match","params","get","then","res","data","console","log","status_code","setState","endpointData","crew","filter","member","job","cast","componentDidMount","render","movieName","location","runtime","budget","revenue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport { API_KEY, API_URL } from '../../config';\nimport Navigation from '../elements/Navigation';\nimport MovieInfo from '../elements/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid';\nimport Actor from '../elements/Actor';\nimport Spinner from '../elements/Spinner';\nimport './Movie.css';\n\nclass Movie extends React.Component {\n  state = {\n    movie: null,\n    actors: null,\n    directors: [],\n    loading: false,\n  };\n\n  componentDidMount() {\n    const { movieId } = this.props.match.params;\n    this.setState({ loading: true });\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n    this.fetchData(endpoint);\n  }\n\n  fetchData = async endpoint => {\n    const { movieId } = this.props.match.params;\n    await axios\n      .get(endpoint)\n      .then(res => res.data)\n      .then(data => {\n        console.log(data);\n\n        if (data.status_code) {\n          this.setState({ loading: false });\n        } else {\n          this.setState({ movie: data }, async () => {\n            let endpointData = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n            await axios\n              .get(endpointData)\n              .then(res => res.data)\n              .then(res => {\n                console.log(res);\n                const directors = res.crew.filter(\n                  member => member.job === 'Director',\n                );\n                this.setState({\n                  actors: res.cast,\n                  directors,\n                  loading: false,\n                });\n              });\n          });\n        }\n      });\n  };\n\n  render() {\n    const { movieName } = this.props.location;\n\n    const {\n      state: { movie, directors },\n    } = this;\n    return (\n      <div className='rmdb-movie'>\n        {movie ? (\n          <>\n            <Navigation movieName={movieName} />\n            <MovieInfo movie={movie} directors={directors} />\n            <MovieInfoBar\n              time={movie.runtime}\n              budget={movie.budget}\n              revenue={movie.revenue}\n            />\n            {/* <FourColGrid /> */}\n            <Spinner />\n          </>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Movie;\n"]},"metadata":{},"sourceType":"module"}